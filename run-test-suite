#!/bin/bash
# Run the image zimbra/soap-harness:latest, passing in the appropriate
# settings.

SUMMARY_FILE="$(dirname $0)/results/results-soap.xml"
DP=$(dirname $0)
pushd "${DP}"
ABS=$(pwd)
popd

CN=soap
EF="${DP}/.env"
RD="${DP}/results"
RTD="${RD}/soapvalidator/SanityTest"
SW=10
SW2=30

if [ ! -f "${EF}" ]
then
    echo "Please copy DOT-env to ${EF} and update as necessary. Then re-run this script."
    exit 1
fi
. "${EF}"

# If the RD is not empty, tar it up first to preserve the information

if [ -d "${RTD}" ]
then
    RTDB="${RD}-$(date -r results/soapvalidator/SanityTest +'%Y-%m-%dT%H:%M:%S').tar.gz"
    echo "Found old test data in ${RD}.  Backing up to ${RTDB}"
    tar cfz "${RTDB}" "${RD}"
    rm -rf "${RD}"/*
fi


docker run --network ${DOCKER_NETWORK} \
  --name ${CN} \
  -v "${ABS}/results":/results \
  --dns ${DOCKER_DNS} --dns 8.8.8.8 \
  --hostname ${CN}.test \
  --env-file "${EF}" \
  -d \
  --rm \
  zimbra/soap-harness:latest

# This just periodically counts the results files and reports results
# so you don't get bored waiting for the test to finish.
SID=$(docker ps --filter "name=${CN}" -q)
while [ "${SID}x" = "x" ]
do
    echo "$(date) - Waiting for ${CN} container to start..."
    sleep ${SW}
    SID=$(docker ps --filter "name=${CN}" -q)
done

while [ ! -d "${RTD}" ]
do
    echo "$(date) - Waiting for tests to start..."
    sleep ${SW}
done

SECONDS=0
while [ "${SID}x" != "x" ]
do
    echo "$(date) - $(find ${RTD} | wc | awk '{print $1}') completed test(s)..."
    sleep ${SW2}
    SID=$(docker ps --filter "name=${CN}" -q)
done

duration=$SECONDS
elapsed=$(echo "$(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed.")
echo "$(date) - Tests finished. ${elapsed}"
echo "Results in the ${RD} directory. Summary:"
# Generate a summary of Pass, Fail, Exception, and Skipped tests.
awk -f <(cat - <<-'_EOF_'
    BEGIN {
        printf("%s:%s:%s:%s\n", "Pass", "Fail", "Exception", "Skipped");
        P=0; F=0; E=0; S=0;
    }

    /status="Pass"/ {P+=1;}
    /status="Fail"/ {F+=1;}
    /status="Exception"/ {E+=1;}
    /status="Skipped"/ {S+=1;}

    END {
        printf("%s:%s:%s:%s\n", P, F, E, S);
    }
_EOF_
) "${SUMMARY_FILE}" | column -ts:
